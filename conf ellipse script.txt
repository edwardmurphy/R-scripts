Tsq.conf.region <- function (X, levels=0.95, 
                    simultaneous=TRUE, univariate=TRUE, bonferroni=TRUE)
{
  # Convert X to a matrix, if it isn't already, from a vector or data frame.

  X <- as.matrix(X)

  # Set n to the number of observations, p to the number of variables.

  n <- nrow(X)
  p <- ncol(X)

  # Stop if arguments are invalid.

  if (!is.numeric(X))
  { stop("Data must be numeric")
  }

  if (n<p)
  { stop("Must have at least as many observations as variables")
  }

  if (!is.numeric(levels) || any(levels<=0) || any(levels>=1))
  { stop("Confidence levels must be between 0 and 1")
  }

  if (p!=2)
  { stop("Only works for 2D data")
  }

  # Create grids of 100 values for each variable, spanning the sample mean 
  # plus and minus four times its standard error.

  se1 <- sd(X[,1])/sqrt(n)
  x1 <- seq (mean(X[,1])-4*se1, mean(X[,1])+4*se1, length=100)
  se2 <- sd(X[,2])/sqrt(n)
  x2 <- seq (mean(X[,2])-4*se2, mean(X[,2])+4*se2, length=100)

  # Create a matrix with the 10000 2D grid points as columns.

  mu0 <- matrix(NA,2,length(x1)*length(x2))
  k <- 0
  for (j in 1:length(x2))
  { for (i in 1:length(x1))
    { k <- k + 1
      mu0[1,k] <- x1[i]
      mu0[2,k] <- x2[j]
    }
  }

  # Compute the T-square test p-values for all 10000 grid points.

  p.values <- Tsq.test (X, mu0)

  # Make a contour plot of the p-values with (elliptical) countours at
  # the specified levels.  
  
  contour (x1, x2, matrix(1-p.values,length(x1),length(x2)), levels=levels)

  # Plot a dot at the sample mean.

  points(mean(X[,1]),mean(X[,2]),pch=20)

  # Plot simultaneous T-square intervals, if asked to.
  
  if (simultaneous)
  { for (lev in levels)
    { ci <- Tsq.conf.int (X, diag(2), lev)
      abline(v=ci[,1])
      abline(h=ci[,2])
    }
  }

  # Plot univariate intervals, if asked to.

  if (univariate)
  { for (lev in levels)
    { abline(v=t.test(X[,1],conf.level=lev)$conf.int,lty=3)
      abline(h=t.test(X[,2],conf.level=lev)$conf.int,lty=3)
    }
  }

  # Plot univariate intervals with Bonferroni correction, if asked to.

  if (bonferroni)
  { for (lev in levels)
    { abline(v=t.test(X[,1],conf.level=1-(1-lev)/2)$conf.int,lty=2)
      abline(h=t.test(X[,2],conf.level=1-(1-lev)/2)$conf.int,lty=2)
    }
  }

  # Return nothing.

  invisible()
}
